#!/bin/bash

if [ $# -lt 2 ] || [ $# -gt 4 ]; then
  echo "Usage:"
  echo "$0 <project> <branch> <data-bucket?> <sub-domain|full-domain?> <login:password?>"
  exit 1
fi

projectName=$1
branch=$2
dataBucketName=${3:-$branch}
domain=$4
password=$5
user=$projectName
userDir="/home/$user"

if [[ ! -d $userDir ]]; then
  echo "Project $projectName does not exist."
  exit 1
fi

cd $userDir

if [[ "dataBucketName" =~ [^a-zA-Z0-9_-] ]]; then
  echo "Bucket name cannot contain special chars."
  exit 1
fi

# Create variables
baseDataDir="$userDir/data"
tarFile="$userDir/artifacts/$branch.tar.gz"
buildNumber=$(openssl rand -hex 8)
destinationBuildDir="$userDir/builds/$branch-$buildNumber"
destinationBranchLink="$userDir/branches/$branch"

# Extract tar.gz file
if [ ! -f "$tarFile" ]; then
  echo "File $tarFile not found"
  exit 1
fi
mkdir -p $destinationBuildDir
if ! tar -xzf $tarFile -C $destinationBuildDir; then
  echo "Failed to extract $tarFile"
  rm -f $tarFile
  exit 1
fi

# Patch destination directory
chown -R "$user:$user" $destinationBuildDir > /dev/null 2>&1

# Move pasta docker compose file
if [ -f "$destinationBuildDir/docker-compose.pasta.yaml" ]; then
  mv "$destinationBuildDir/docker-compose.pasta.yaml" "$destinationBuildDir/docker-compose.yaml"
fi

# No docker compose file
if [ ! -f "$destinationBuildDir/docker-compose.yaml" ]; then
  echo "No docker-compose.yaml or docker-compose.pasta.yaml file found in $tarFile"
  exit 1
fi

# Dot env
dotEnv="$destinationBuildDir/.env"
echo "" >> $dotEnv

# Force pasta project name
sed -i '/^PASTA_PROJECT_NAME=/d' $dotEnv
echo "PASTA_PROJECT_NAME=$projectName" >> $dotEnv

# Inject build number
echo "PASTA_BUILD=$buildNumber" >> $dotEnv

# If we have a domain to set
if [ -n "$domain" ]; then
  # Remove virtual host from dot env
  sed -i '/^VIRTUAL_HOST=/d' $dotEnv
  # Has a dot, it's a full-domain
  # No dot, it's a sub-domain
  if [[ "$domain" != *"."* ]]; then
    domain="$domain.$PASTA_DOMAIN"
  fi
  echo "Domain is $domain"
  echo "VIRTUAL_HOST=$domain" >> $dotEnv
# No domain to set, but no domain in dot env, use auto mode
elif ! grep -q '^VIRTUAL_HOST=' $dotEnv; then
  domain="$projectName-$branch.$PASTA_DOMAIN"
  echo "Missing VIRTUAL_HOST from .env file. Setting domain to $domain"
  echo "VIRTUAL_HOST=$domain" >> $dotEnv
  exit 1
fi

# Remove pasta data from dot env and force it
sed -i '/^PASTA_DATA=/d' $dotEnv
echo "PASTA_DATA=../../data/$dataBucketName" >> $dotEnv

# Inject branch
sed -i '/^PASTA_BRANCH=/d' $dotEnv
echo "PASTA_BRANCH=$branch" >> $dotEnv

# Set the docker compose project name from the unique build number
# With this, "docker compose" commands can be ran from the branch link and the build directory
composeProjectName="${projectName}_${branch}_${buildNumber}"
echo "COMPOSE_PROJECT_NAME=$composeProjectName" >> $dotEnv

# Preparing data directories
echo "Extracting data directories ..."
dockerComposeConfig=$(cd $destinationBuildDir && docker compose config)
dataVolumes=$(echo "$dockerComposeConfig" | grep "source: $HOME/data" | awk -F"$HOME/data" '{print $2}' | tr -d ' ')

# Create directories for each volume
for volume in $dataVolumes; do
  echo "- $volume"
  mkdir -p "${baseDataDir}${volume}"
done

# FIXME : Maybe find something else than 777 ?
# FIXME : Adding user to the group is not enough for 776, why ?
#echo "USER_ID=$(id -u $USER):$(id -g $USER)" >> $dotEnv
# ADD : usermod -aG www-data $username
# REMOVE : gpasswd -d $username www-data
echo "Patching user on data ..."
chown -R "$user:$user" $baseDataDir > /dev/null 2>&1
chmod -R 0777 $baseDataDir > /dev/null 2>&1

# Setting password
echo "Setting password ...."
proxy-password $domain $password

# Docker compose up
echo "Starting containers ..."
if ! (cd $destinationBuildDir && docker compose build && docker compose up -d); then
  echo "âš  Unable to start docker stack"
  docker compose down > /dev/null 2>&1
  rm -rf $destinationBuildDir
  rm -f $tarFile
  exit 1
fi
echo ""

# TODO : Wait enough time to have the new container ready before stopping the old one
# TODO : Maybe having a heartbeat call or something ?
# TODO : If more than 60s, docker compose down and fail
sleep 2

echo "Stopping and removing old containers ..."
if [ -d $destinationBranchLink ]; then
  oldBranchDir=$(readlink -f $destinationBranchLink)
  (cd $oldBranchDir && docker compose down && docker container prune -f)
  rm -rf $oldBranchDir
fi
echo ""

echo "Creating branch link ..."
ln -sf $destinationBuildDir $destinationBranchLink
rm -f $tarFile

echo ""
echo "Done"
