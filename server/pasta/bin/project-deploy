#!/bin/bash

if [ $# -lt 2 ] || [ $# -gt 6 ]; then
  echo "Usage:"
  echo "$0 <project> <branch> <data-bucket?> <sub-domain|full-domain?> <alias?> <login:password?>"
  exit 1
fi

# ------------------------------------------------------------------------------ INIT

projectName=$1
branch=$2
dataBucketName=${3:-$branch}
domain=$4
alias=$5
password=$6
user=$projectName
userDir="/home/$user"

if [[ ! -d $userDir ]]; then
  echo "Project $projectName does not exist."
  exit 1
fi

cd $userDir

if [[ "dataBucketName" =~ [^a-zA-Z0-9_-] ]]; then
  echo "Bucket name cannot contain special chars."
  exit 1
fi

# Create variables
baseDataDir="$userDir/data"
tarFile="$userDir/artifacts/$branch.tar.gz"
buildNumber=$(openssl rand -hex 8)
destinationBuildDir="$userDir/builds/$branch-$buildNumber"
destinationBranchLink="$userDir/branches/$branch"

echo "> Build number is $buildNumber"

# ------------------------------------------------------------------------------ EXTRACT

# Extract tar.gz file
if [ ! -f "$tarFile" ]; then
  echo "File $tarFile not found"
  exit 1
fi
mkdir -p $destinationBuildDir
echo "Extracting $tarFile ..."
if ! tar -xzf $tarFile -C $destinationBuildDir; then
  echo "⚠ Failed to extract $tarFile"
  rm -f $tarFile
  rm -rf $destinationBuildDir
  exit 1
fi

# ------------------------------------------------------------------------------ PATCH OWNING

# Patch destination directory
chown -R "$user:$user" $destinationBuildDir > /dev/null 2>&1

# ------------------------------------------------------------------------------ DOCKER COMPOSE INIT

# Move pasta docker compose file
if [ -f "$destinationBuildDir/docker-compose.pasta.yaml" ]; then
  mv "$destinationBuildDir/docker-compose.pasta.yaml" "$destinationBuildDir/docker-compose.yaml"
fi

# No docker compose file
dockerComposeFile="$destinationBuildDir/docker-compose.yaml"
if [ ! -f "$dockerComposeFile" ]; then
  echo "⚠ No docker-compose.yaml or docker-compose.pasta.yaml file found in $tarFile"
  rm -rf $destinationBuildDir
  rm -f $tarFile
  exit 1
fi

# ------------------------------------------------------------------------------ DOT ENV INIT

# Dot env
dotEnv="$destinationBuildDir/.env"
echo "" >> $dotEnv

# ------------------------------------------------------------------------------ COMPUTE DOMAIN

# If we have a domain to set
if [ -n "$domain" ]; then
  # Remove virtual host from dot env
  sed -i '/^VIRTUAL_HOST=/d' $dotEnv
  # If it's a dot, it's the main pasta domain
  # If it has a dot, it's a full-domain ( can be external to main pasta domain )
  # No dot, it's a sub-domain of the main pasta domain
  if [[ "$domain" == "." ]]; then
    domain="$PASTA_DOMAIN"
  elif [[ "$domain" != *"."* ]]; then
    domain="$domain.$PASTA_DOMAIN"
  fi
  echo "> Domain is $domain"
  echo "VIRTUAL_HOST=$domain" >> $dotEnv
# No domain to set, but no domain in dot env, use auto mode
elif ! grep -q '^VIRTUAL_HOST=' $dotEnv; then
  domain="$projectName-$branch.$PASTA_DOMAIN"
  echo "Missing VIRTUAL_HOST from .env file. Setting domain to $domain"
  echo "VIRTUAL_HOST=$domain" >> $dotEnv
  exit 1
fi

# Save domain as text for later deletion
echo $domain > "$destinationBuildDir/domain.txt"

# ------------------------------------------------------------------------------ COMPUTE ALIAS

# Add alias service if alias is detected
if [ -n "$alias" ]; then
  # If it's a dot, it's the main pasta domain
  # If it has a dot, it's a full-domain ( can be external to main pasta domain )
  # No dot, it's a sub-domain of the main pasta domain
  if [[ "$alias" == "." ]]; then
    alias="$PASTA_DOMAIN"
  elif [[ "$alias" != *"."* ]]; then
    alias="$alias.$PASTA_DOMAIN"
  fi
  echo "> Alias is $alias"
  pasta_alias="
  pasta_alias:
    image: morbz/docker-web-redirect
    restart: unless-stopped
    environment:
      VIRTUAL_HOST: $alias
      LETSENCRYPT_HOST: $alias
      REDIRECT_TARGET: $domain
      # 302 redirects
      REDIRECT_TYPE: redirect
    networks:
      - pasta
"
  # Split docker compose around "services" declaration
  before=$(sed '/^services\s*:/q' $dockerComposeFile)
  after=$(sed -n '/^services\s*:/,$p' $dockerComposeFile | tail -n +2)
  # Recreate the docker compose file with injected alias
  echo "$before" > $dockerComposeFile
  echo "$pasta_alias" >> $dockerComposeFile
  echo "$after" >> $dockerComposeFile
fi

# ------------------------------------------------------------------------------ CHECK DOMAIN AVAILABILITY

# TODO : Grab all used domains from all containers
# TODO : Exclude current project with current branch
# TODO : Check for $domain and $alias, should fail if any is already reserved
# TODO : see grab-reserved-hostnames.sh

# ------------------------------------------------------------------------------ INJECT DOT ENV

# Force pasta project name
sed -i '/^PASTA_PROJECT_NAME=/d' $dotEnv
echo "PASTA_PROJECT_NAME=$projectName" >> $dotEnv

# Inject build number
echo "PASTA_BUILD=$buildNumber" >> $dotEnv

# Save https host
echo "LETSENCRYPT_HOST=$domain" >> $dotEnv

# Remove pasta data from dot env and force it
sed -i '/^PASTA_DATA=/d' $dotEnv
echo "PASTA_DATA=../../data/$dataBucketName" >> $dotEnv

# Inject branch
sed -i '/^PASTA_BRANCH=/d' $dotEnv
echo "PASTA_BRANCH=$branch" >> $dotEnv

# Force https redirect
sed -i '/^HTTPS_METHOD=/d' $dotEnv
echo "HTTPS_METHOD=redirect" >> $dotEnv

# Set the docker compose project name from the unique build number
# With this, "docker compose" commands can be ran from the branch link and the build directory
composeProjectName="${projectName}_${branch}_${buildNumber}"
echo "COMPOSE_PROJECT_NAME=$composeProjectName" >> $dotEnv

# ------------------------------------------------------------------------------ PASSWORD

# Check if we had a domain in previous build
oldDomainFile="$destinationBranchLink/domain.txt"
if [ -f "$oldDomainFile" ]; then
  oldDomain=$(cat $oldDomainFile)
  # Remove old password
  proxy-password "$oldDomain"
  # Remove old config
  rm -f "/etc/nginx/vhost.d/$oldDomain" > /dev/null 2>&1
fi

# Setting password
if [ -n "$password" ]; then
  proxy-password "$domain" "$password"
fi

# ------------------------------------------------------------------------------ NGINX CONFIG

# Setting nginx config
proxyConfigSource="$destinationBuildDir/.proxy/nginx.conf"
proxyConfigDestination="/etc/nginx/vhost.d/$domain"
if [ -f "$proxyConfigSource" ]; then
  echo "Setting nginx config ..."
  mv -f $proxyConfigSource $proxyConfigDestination > /dev/null 2>&1
fi

# ------------------------------------------------------------------------------ RELOAD NGINX

# Reload proxy config
echo "Reloading proxy config ..."
docker exec proxy-nginx nginx -s reload

# ------------------------------------------------------------------------------ STARTING NEW BUILD

# Docker compose up
echo "Starting containers ..."
if ! (cd $destinationBuildDir && docker compose build && docker compose up -d); then
  echo "⚠ Unable to start docker stack"
  docker compose down --volumes --remove-orphans > /dev/null 2>&1
  rm -rf $destinationBuildDir
  rm -f $tarFile
  exit 1
fi
echo ""

# ------------------------------------------------------------------------------ STOPPING PREVIOUS BUILD

# TODO : Wait enough time to have the new container ready before stopping the old one
# TODO : Maybe having a heartbeat call or something ?
# TODO : If more than 60s, docker compose down and fail
sleep 1

echo "Stopping and removing old containers ..."
if [ -d $destinationBranchLink ]; then
  oldBranchDir=$(readlink -f $destinationBranchLink)
  (cd $oldBranchDir && docker compose down --volumes --remove-orphans && docker container prune -f)
  rm -rf $oldBranchDir
fi
echo ""

# ------------------------------------------------------------------------------ BRANCH LINK TO BUILD

echo "Creating branch link ..."
ln -sf $destinationBuildDir $destinationBranchLink
rm -f $tarFile

# ------------------------------------------------------------------------------ END

echo ""
echo "Branch $branch of $projectName deployed to $domain"
