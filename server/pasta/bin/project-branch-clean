#!/bin/bash

clear
if [ -z "$1" ]; then
  read -p "Enter the project name: " projectName
else
  projectName="$1"
fi
if [ -z "$2" ]; then
  read -p "Enter branch name: " branch
else
  branch="$2"
fi

buildsDir="builds"
branchesDir="branches"
user="$projectName"
userDir="/home/$user"

if [[ ! -d $userDir ]]; then
  echo "Project $projectName does not exist."
  exit 1
fi

cd "$userDir"

# Collect all build IDs for the specified branch
allBuilds=()
for build in $buildsDir/${branch}-*; do
  [ -d "$build" ] && allBuilds+=( "$(basename "$build")" )
done

# Collect the linked build ID for the specified branch
linkedBuild=$(basename "$(readlink "$branchesDir/$branch")" 2>/dev/null | sed 's/^.*-//')

# Remove unlinked builds
for build in "${allBuilds[@]}"; do
  buildId=$(echo "$build" | sed 's/^.*-//')
  if [ "$buildId" != "$linkedBuild" ]; then
    echo "Stopping and removing build $build ..."
    (cd "$buildsDir/$build" && docker compose down --volumes --remove-orphans) > /dev/null 2>&1
    rm -rf "$buildsDir/$build"
  fi
done

echo ""
echo "> Branch $branch of project $projectName cleaned"